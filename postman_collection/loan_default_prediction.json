{
  "info": {
    "name": "Loan Default Prediction API",
    "description": "Complete API testing collection for Loan Default Prediction system",
    "version": "1.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Health Check",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response contains status healthy\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.status).to.eql(\"healthy\");",
              "});",
              "",
              "pm.test(\"Response time is less than 1000ms\", function () {",
              "    pm.expect(pm.response.responseTime).to.be.below(1000);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/health",
          "host": [
            "{{base_url}}"
          ],
          "path": [
            "health"
          ]
        },
        "description": "Check if the API is running and healthy"
      }
    },
    {
      "name": "API Documentation",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/docs",
          "host": [
            "{{base_url}}"
          ],
          "path": [
            "docs"
          ]
        },
        "description": "Access the interactive API documentation"
      }
    },
    {
      "name": "API OpenAPI Schema",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/openapi.json",
          "host": [
            "{{base_url}}"
          ],
          "path": [
            "openapi.json"
          ]
        },
        "description": "Get the OpenAPI schema for the API"
      }
    },
    {
      "name": "Low Risk Loan Prediction",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response contains required fields\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('prediction');",
              "    pm.expect(jsonData).to.have.property('probability');",
              "    pm.expect(jsonData).to.have.property('risk_level');",
              "});",
              "",
              "pm.test(\"Prediction is binary (0 or 1)\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.prediction).to.be.oneOf([0, 1]);",
              "});",
              "",
              "pm.test(\"Probability is between 0 and 1\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.probability).to.be.at.least(0);",
              "    pm.expect(jsonData.probability).to.be.at.most(1);",
              "});",
              "",
              "pm.test(\"Risk level is valid\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.risk_level).to.be.oneOf([\"Low Risk\", \"Medium Risk\", \"High Risk\"]);",
              "});",
              "",
              "pm.test(\"Response time is acceptable\", function () {",
              "    pm.expect(pm.response.responseTime).to.be.below(2000);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"Client_Income\": 75000,\n  \"Car_Owned\": 1,\n  \"Bike_Owned\": 0,\n  \"Active_Loan\": 0,\n  \"House_Own\": 1,\n  \"Child_Count\": 1,\n  \"Credit_Amount\": 25000,\n  \"Loan_Annuity\": 2000,\n  \"Age_Days\": 15000,\n  \"Employed_Days\": 3000,\n  \"Client_Family_Members\": 3\n}"
        },
        "url": {
          "raw": "{{base_url}}/predict",
          "host": [
            "{{base_url}}"
          ],
          "path": [
            "predict"
          ]
        },
        "description": "Test prediction for a low-risk loan application (high income, stable employment, low debt-to-income ratio)"
      }
    },
    {
      "name": "High Risk Loan Prediction",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response contains required fields\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('prediction');",
              "    pm.expect(jsonData).to.have.property('probability');",
              "    pm.expect(jsonData).to.have.property('risk_level');",
              "});",
              "",
              "pm.test(\"High risk scenario should have higher probability\", function () {",
              "    var jsonData = pm.response.json();",
              "    // For high risk case, we expect higher default probability",
              "    pm.expect(jsonData.probability).to.be.above(0.1);",
              "});",
              "",
              "pm.test(\"Response time is acceptable\", function () {",
              "    pm.expect(pm.response.responseTime).to.be.below(2000);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"Client_Income\": 25000,\n  \"Car_Owned\": 0,\n  \"Bike_Owned\": 0,\n  \"Active_Loan\": 1,\n  \"House_Own\": 0,\n  \"Child_Count\": 3,\n  \"Credit_Amount\": 80000,\n  \"Loan_Annuity\": 4500,\n  \"Age_Days\": 8000,\n  \"Employed_Days\": 365,\n  \"Client_Family_Members\": 5\n}"
        },
        "url": {
          "raw": "{{base_url}}/predict",
          "host": [
            "{{base_url}}"
          ],
          "path": [
            "predict"
          ]
        },
        "description": "Test prediction for a high-risk loan application (low income, high debt-to-income ratio, young age, short employment)"
      }
    },
    {
      "name": "Medium Risk Loan Prediction",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response contains required fields\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('prediction');",
              "    pm.expect(jsonData).to.have.property('probability');",
              "    pm.expect(jsonData).to.have.property('risk_level');",
              "});",
              "",
              "pm.test(\"Medium risk probability should be moderate\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.probability).to.be.above(0.05);",
              "    pm.expect(jsonData.probability).to.be.below(0.8);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"Client_Income\": 45000,\n  \"Car_Owned\": 0,\n  \"Bike_Owned\": 1,\n  \"Active_Loan\": 0,\n  \"House_Own\": 0,\n  \"Child_Count\": 2,\n  \"Credit_Amount\": 50000,\n  \"Loan_Annuity\": 3000,\n  \"Age_Days\": 12000,\n  \"Employed_Days\": 1800,\n  \"Client_Family_Members\": 4\n}"
        },
        "url": {
          "raw": "{{base_url}}/predict",
          "host": [
            "{{base_url}}"
          ],
          "path": [
            "predict"
          ]
        },
        "description": "Test prediction for a medium-risk loan application (moderate income, moderate debt-to-income ratio)"
      }
    },
    {
      "name": "Edge Case - Very High Income",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Very high income should result in low risk\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.risk_level).to.be.oneOf([\"Low Risk\", \"Medium Risk\"]);",
              "});",
              "",
              "pm.test(\"Probability should be relatively low\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.probability).to.be.below(0.5);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"Client_Income\": 200000,\n  \"Car_Owned\": 1,\n  \"Bike_Owned\": 1,\n  \"Active_Loan\": 0,\n  \"House_Own\": 1,\n  \"Child_Count\": 2,\n  \"Credit_Amount\": 30000,\n  \"Loan_Annuity\": 2500,\n  \"Age_Days\": 18000,\n  \"Employed_Days\": 5000,\n  \"Client_Family_Members\": 4\n}"
        },
        "url": {
          "raw": "{{base_url}}/predict",
          "host": [
            "{{base_url}}"
          ],
          "path": [
            "predict"
          ]
        },
        "description": "Test prediction for edge case with very high income"
      }
    },
    {
      "name": "Edge Case - Young Applicant",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Young applicant handled correctly\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.risk_level).to.be.oneOf([\"Low Risk\", \"Medium Risk\", \"High Risk\"]);",
              "});",
              "",
              "pm.test(\"Response is valid\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.prediction).to.be.oneOf([0, 1]);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"Client_Income\": 35000,\n  \"Car_Owned\": 0,\n  \"Bike_Owned\": 0,\n  \"Active_Loan\": 0,\n  \"House_Own\": 0,\n  \"Child_Count\": 0,\n  \"Credit_Amount\": 15000,\n  \"Loan_Annuity\": 1200,\n  \"Age_Days\": 7000,\n  \"Employed_Days\": 730,\n  \"Client_Family_Members\": 1\n}"
        },
        "url": {
          "raw": "{{base_url}}/predict",
          "host": [
            "{{base_url}}"
          ],
          "path": [
            "predict"
          ]
        },
        "description": "Test prediction for a young applicant (around 19 years old)"
      }
    },
    {
      "name": "Error Case - Missing Required Fields",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 422 (Validation Error)\", function () {",
              "    pm.response.to.have.status(422);",
              "});",
              "",
              "pm.test(\"Error response contains validation details\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('detail');",
              "});",
              "",
              "pm.test(\"Error mentions missing fields\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(JSON.stringify(jsonData)).to.include('field required');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"Client_Income\": 50000,\n  \"Car_Owned\": 1\n}"
        },
        "url": {
          "raw": "{{base_url}}/predict",
          "host": [
            "{{base_url}}"
          ],
          "path": [
            "predict"
          ]
        },
        "description": "Test error handling when required fields are missing"
      }
    },
    {
      "name": "Error Case - Invalid Data Types",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 422 (Validation Error)\", function () {",
              "    pm.response.to.have.status(422);",
              "});",
              "",
              "pm.test(\"Error response contains validation details\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('detail');",
              "});",
              "",
              "pm.test(\"Error mentions type validation\", function () {",
              "    var jsonData = pm.response.json();",
              "    var errorText = JSON.stringify(jsonData);",
              "    pm.expect(errorText).to.satisfy(function(text) {",
              "        return text.includes('type') || text.includes('value');",
              "    });",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"Client_Income\": \"invalid_income\",\n  \"Car_Owned\": \"yes\",\n  \"Bike_Owned\": 0,\n  \"Active_Loan\": 0,\n  \"House_Own\": 1,\n  \"Child_Count\": 1,\n  \"Credit_Amount\": 25000,\n  \"Loan_Annuity\": 2000,\n  \"Age_Days\": 15000,\n  \"Employed_Days\": 3000,\n  \"Client_Family_Members\": 3\n}"
        },
        "url": {
          "raw": "{{base_url}}/predict",
          "host": [
            "{{base_url}}"
          ],
          "path": [
            "predict"
          ]
        },
        "description": "Test error handling when invalid data types are provided"
      }
    },
    {
      "name": "Stress Test - Multiple Predictions",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response time is reasonable under load\", function () {",
              "    pm.expect(pm.response.responseTime).to.be.below(3000);",
              "});",
              "",
              "pm.test(\"Response is still valid\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('prediction');",
              "    pm.expect(jsonData).to.have.property('probability');",
              "    pm.expect(jsonData).to.have.property('risk_level');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"Client_Income\": 60000,\n  \"Car_Owned\": 1,\n  \"Bike_Owned\": 0,\n  \"Active_Loan\": 0,\n  \"House_Own\": 1,\n  \"Child_Count\": 2,\n  \"Credit_Amount\": 40000,\n  \"Loan_Annuity\": 2800,\n  \"Age_Days\": 13000,\n  \"Employed_Days\": 2500,\n  \"Client_Family_Members\": 4\n}"
        },
        "url": {
          "raw": "{{base_url}}/predict",
          "host": [
            "{{base_url}}"
          ],
          "path": [
            "predict"
          ]
        },
        "description": "Test for stress testing - run this multiple times to check performance"
      }
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "exec": [
          "// Set timestamp for requests",
          "pm.globals.set(\"timestamp\", new Date().toISOString());"
        ],
        "type": "text/javascript"
      }
    },
    {
      "listen": "test",
      "script": {
        "exec": [
          "// Global test to log response details",
          "console.log(\"Request:\", pm.request.url);",
          "console.log(\"Status:\", pm.response.code);",
          "console.log(\"Response Time:\", pm.response.responseTime + \"ms\");",
          "console.log(\"Response Size:\", pm.response.responseSize + \"bytes\");",
          "",
          "// Store response time for performance monitoring",
          "pm.globals.set(\"last_response_time\", pm.response.responseTime);"
        ],
        "type": "text/javascript"
      }
    }
  ],
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:8000",
      "type": "string"
    },
    {
      "key": "api_version",
      "value": "1.0.0",
      "type": "string"
    }
  ]
}